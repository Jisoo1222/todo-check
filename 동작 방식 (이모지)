import calendar
import tkinter as tk
from tkinter import messagebox, simpledialog
import sqlite3

# 데이터베이스 연결 및 테이블 생성
conn = sqlite3.connect('calendar.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS events
             (id INTEGER PRIMARY KEY AUTOINCREMENT,
              date INTEGER,
              event TEXT,
              user TEXT,
              shared INTEGER,
              emoji TEXT)''')
conn.commit()

def show_calendar():
    year = int(year_entry.get())
    month = int(month_entry.get())

    try:
        cal = calendar.month(year, month)
        calendar_label.configure(text=cal)
        load_emojis(year, month)
    except ValueError:
        messagebox.showerror("Error", "Invalid year or month")

def add_event():
    date = int(selected_date.get())
    event = simpledialog.askstring("Add Event", "Enter event details:")
    if event:
        emoji = simpledialog.askstring("Add Event", "Enter emoji:")
        if emoji:
            c.execute("INSERT INTO events (date, event, user, shared, emoji) VALUES (?, ?, ?, ?, ?)",
                      (date, event, current_user.get(), 0, emoji))
            conn.commit()
            messagebox.showinfo("Event Added", "Event has been added.")
        else:
            messagebox.showerror("Error", "Emoji not provided.")
    else:
        messagebox.showerror("Error", "Event not provided.")

def delete_event():
    date = int(selected_date.get())
    if date in events and events[date]:
        event = simpledialog.askstring("Delete Event", "Enter event details:")
        if event:
            c.execute("DELETE FROM events WHERE date=? AND event=? AND user=?", (date, event, current_user.get()))
            conn.commit()
            messagebox.showinfo("Event Deleted", "Event has been deleted.")
        else:
            messagebox.showerror("Error", "Event not found.")
    else:
        messagebox.showerror("Error", "No events on this date.")

def edit_event():
    date = int(selected_date.get())
    if date in events and events[date]:
        event = simpledialog.askstring("Edit Event", "Enter event details:")
        if event:
            new_event = simpledialog.askstring("Edit Event", "Enter updated event details:")
            if new_event:
                c.execute("UPDATE events SET event=? WHERE date=? AND event=? AND user=?",
                          (new_event, date, event, current_user.get()))
                conn.commit()
                messagebox.showinfo("Event Edited", "Event has been edited.")
        else:
            messagebox.showerror("Error", "Event not found.")
    else:
        messagebox.showerror("Error", "No events on this date.")

def share_event():
    date = int(selected_date.get())
    if date in events and events[date]:
        event = simpledialog.askstring("Share Event", "Enter event details:")
        if event:
            c.execute("UPDATE events SET shared=1 WHERE date=? AND event=? AND user=?", (date, event, current_user.get()))
            conn.commit()
            messagebox.showinfo("Event Shared", "Event has been shared.")
        else:
            messagebox.showerror("Error", "Event not found.")
    else:
        messagebox.showerror("Error", "No events on this date.")

def show_events():
    date = int(selected_date.get())
    if date in events and events[date]:
        event_list = "\n".join(events[date])
        messagebox.showinfo("Events", event_list)
    else:
        messagebox.showinfo("Events", "No events on this date.")

def load_emojis(year, month):
    for date_button in date_buttons:
        date_button.config(text="")
    c.execute("SELECT date, emoji FROM events WHERE user=? AND strftime('%Y', date)=? AND strftime('%m', date)=?",
              (current_user.get(), str(year), str(month).zfill(2)))
    rows = c.fetchall()
    for row in rows:
        date = row[0]
        emoji = row[1]
        date_buttons[date - 1].config(text=emoji)

# 메인 창 생성
root = tk.Tk()
root.title("일정 관리 앱")

# 년도 입력 필드
year_label = tk.Label(root, text="년도:")
year_label.pack()
year_entry = tk.Entry(root)
year_entry.pack()

# 월 입력 필드
month_label = tk.Label(root, text="월:")
month_label.pack()
month_entry = tk.Entry(root)
month_entry.pack()

# 달력 표시 버튼
calendar_button = tk.Button(root, text="달력 보기", command=show_calendar)
calendar_button.pack()

# 달력 표시 라벨
calendar_label = tk.Label(root, text="")
calendar_label.pack()

# 선택한 날짜 변수
selected_date = tk.StringVar()

# 날짜 선택 라디오 버튼
date_frame = tk.Frame(root)
date_frame.pack()

date_buttons = []
for date in range(1, 32):
    date_button = tk.Button(date_frame, text=str(date), variable=selected_date, value=str(date))
    date_button.pack(side=tk.LEFT)
    date_buttons.append(date_button)

# 일정 관리 버튼
event_frame = tk.Frame(root)
event_frame.pack()

add_button = tk.Button(event_frame, text="일정 추가", command=add_event)
add_button.pack(side=tk.LEFT)

delete_button = tk.Button(event_frame, text="일정 삭제", command=delete_event)
delete_button.pack(side=tk.LEFT)

edit_button = tk.Button(event_frame, text="일정 수정", command=edit_event)
edit_button.pack(side=tk.LEFT)

share_button = tk.Button(event_frame, text="일정 공유", command=share_event)
share_button.pack(side=tk.LEFT)

show_button = tk.Button(event_frame, text="일정 확인", command=show_events)
show_button.pack(side=tk.LEFT)

# 현재 사용자
current_user = tk.StringVar()
user_entry = tk.Entry(root, textvariable=current_user)
user_entry.pack()

# 일정 데이터
events = {}

# 앱 실행
root.mainloop()

# 데이터베이스 연결 종료
conn.close()

